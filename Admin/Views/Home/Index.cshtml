@model IEnumerable<Generics.DataModels.AdminModels.WorkTask>
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    var host = Context.Request.Scheme + "://" + Context.Request.Host;
    var serializer = new JavaScriptSerializer();

}
    <style>
        .dot {
            height: 30px;
            width: 30px;
            
            border-radius: 50%;
            display: inline-block;
        }
    </style>
<div class="container-fluid">
    <div class="row clearfix">
        <div class="col-lg-3 col-md-6 col-sm-6">
            <div class="card state_w1">
                <div class="body d-flex justify-content-between">
                    <div class="col-md-12">
                        <h5>Over All</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Total</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-sm-6">
            <div class="card state_w1">
                <div class="body d-flex justify-content-between">
                    <div class="col-md-12">
                        <h5>Current Week</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Total</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-sm-6">
            <div class="card state_w1">
                <div class="body d-flex justify-content-between">
                    <div class="col-md-12">
                        <h5>Current Month</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Total</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-sm-6">
            <div class="card state_w1">
                <div class="body d-flex justify-content-between" style="background-color:#04BE5B">
                    <div class="col-md-12">
                        <h5>Total</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Total</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                            <div class="col-md-4">
                                <h5>45</h5>
                                <span>Done</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row clearfix">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="card project_list">
                
                <div class="pull-right">
                    <button class="btn btn-success" onclick="GenerateTask()">Generate Task <i class="zmdi zdmi-plus"></i></button>
                </div>
               
                <div class="table-responsive">
                    <table class="table table-hover c_table">
                        <thead>
                            <tr>
                                <th>Project</th>
                                <th>Platforms</th>
                                <th>Time</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td><strong>@item.ProjectName</strong></td>
                                    <td>
                                        @foreach (var plat in item.WorkTaskPlatforms)
                                        {
                                            if (plat.IsDesigned)
                                            {
                                                <span class="dot" style="background-color: #04BE5B;">
                                                    <i style="vertical-align: -webkit-baseline-middle;padding: 7px;" class="zmdi zmdi-@plat.PlatformIcon PlatformIcon" name="@plat.PlatformName@plat.WorkTaskId" value="@plat.Id" onclick="SwalOpen(@plat.Id)"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="dot" style="background-color:gainsboro ;">
                                                    <i style="vertical-align: -webkit-baseline-middle;padding: 7px;" class="zmdi zmdi-@plat.PlatformIcon PlatformIcon" name="@plat.PlatformName@plat.WorkTaskId" value="@plat.Id" onclick="SwalOpen(@plat.Id)"></i>
                                                </span>
                                            }
                                        }
                                    </td>
                                    <td>@item.OnCreated</td>
                                   
                                    <td><span class="badge badge-warning">To Do</span></td>
                                    <td>
                                        <span><i class="zmdi zmdi-plus btn-sm btn btn-success" data-toggle="modal" data-target="#smallModal" onclick="GeneratePlatforms(@item.Id)"></i></span>
                                      
                                            <span><i class="zmdi zmdi-info btn-sm btn btn-danger" onclick="ReportTask(@item.Id)"> Report</i></span>
                                           
                                        <div class="my-component" id="@item.Id" data-options="@JsonConvert.SerializeObject(item.WorkTaskPlatforms)"></div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="modal fade" id="smallModal" tabindex="-1" role="dialog">
                        <div class="modal-dialog modal-sm" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="title" id="smallModalLabel">Paltforms</h4>
                                </div>
                                <div class="modal-body" id="myPlatforms">
                                    <!--data will be append-->
                                    
                                </div>
                                <div class="modal-footer">
                                    <button type="button" onclick="SwalPlatformsOpen()" class="btn btn-info btn-round waves-effect">Updates</button>
                                    <button type="button" class="btn btn-default btn-round waves-effect" data-dismiss="modal">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <ul class="pagination pagination-primary mt-4">
                    <li class="page-item active"><a class="page-link" href="javascript:void(0);">1</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:void(0);">2</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:void(0);">3</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:void(0);">4</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:void(0);">5</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<script>
    function ReportTask(id) {
        $.ajax({
            url: "@host" + "/Json/ReportTask/"+id ,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data)
                    {
                        if (data == true) {
                            Swal.fire({
                                position: 'top-end',
                                icon: 'success',
                                title: 'Task has been Reported',
                                showConfirmButton: false,
                                timer: 1500
                            })
                        } if (data == false) {
                            Swal.fire(
                                'Not Reported',
                                'Your task has not been Reported.',
                                'error'
                            );
                        } if(data==null){
                            Swal.fire(
                                'Not Found',
                                'Task not found.',
                                'warning'
                            );
                        }
                    }
                });
    }
    function GeneratePlatforms(id) {
        var platforms = [];
        var platformHtml = "";
        $('#'+id).each(function () {
            var component = $(this);
            platforms=component.data('options');
            console.log(platforms);
        });
        for (var i = 0; i < platforms.length; i++) {
            platformHtml += "<div class='form-group'><input type='checkbox' value='" + platforms[i].Id + "' name='PlatformCheckbox' />  " + platforms[i].PlatformName + "</div>"
        }
        $('#myPlatforms').html(platformHtml);
        }
    function SwalPlatformsOpen() {
        var TaskPlatforms = new Array();

        var inputElements = document.getElementsByName('PlatformCheckbox');
        for (var i = 0; inputElements[i]; ++i) {
            if (inputElements[i].checked) {
                TaskPlatforms.push(inputElements[i].value );
            }
        }
        console.log(TaskPlatforms);
         $.ajax({
                     url: "@host" + "/Json/MultiPlatform" ,
                     type: 'POST',
                     data: { id: TaskPlatforms },
                     traditional: true,
                     dataType: 'json',
                    success: function (data)
                    {
                        if (data == true) {
                            Swal.fire({
                                position: 'top-end',
                                icon: 'success',
                                title: 'Platform has been Updated',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            location.reload(true);
                        } if (data == false) {
                            Swal.fire(
                                'Not Updated',
                                'Your file has been Updated.',
                                'error'
                            );
                        } if(data==null){
                            Swal.fire(
                                'Not Found',
                                'Platform not found.',
                                'warning'
                            );
                        }
                    }
                });
    }
        function SwalOpen(id) {
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger'
            },

            buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Mark Done',
            cancelButtonText: 'Mark Not Done',
            reverseButtons: true
        }).then((result) => {
            if (result.value) {
                SinglePlatform(id, result.value);
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                SinglePlatform(id, result.value);
            }
        })
    }
    function SinglePlatform(id, status) {
                 $.ajax({
                    url: "@host" + "/Json/SinglePlatform" ,
                    type: 'POST',
                    data: ({ id: id, status:status }),
                    dataType: 'json',
                    success: function (data)
                    {
                        if (data == true) {
                            Swal.fire({
                                position: 'top-end',
                                icon: 'success',
                                title: 'Platform has been Updated',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            location.reload(true);
                        } if (data == false) {
                            Swal.fire(
                                'Not Updated',
                                'Your file has been Updated.',
                                'error'
                            );
                        } if(data==null){
                            Swal.fire(
                                'Not Found',
                                'Platform not found.',
                                'warning'
                            );
                        }
                    }
                });

            }
    function GenerateTask() {
        $.ajax({
            url: "@host" +"/Json/GenerateTask",
            type: 'GET',
            dataType: 'json',
            success: function (d)
            {
                if (d != null) {
                    Swal.fire({
                        position: 'top-end',
                        icon: 'success',
                        title: 'Your tasks has been generated',
                        showConfirmButton: false,
                        timer: 1500
                    })
                    location.reload(true);
                }

            }
        });
    }
</script>
